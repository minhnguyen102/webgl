var VSHADER_SOURCE =
'attribute vec4 a_Position;\n' +
'uniform mat4 u_xformMatrix;\n' +
'void main() {\n' +
'gl_Position= u_xformMatrix * a_Position ;\n' +
'}\n'
var FSHADER_SOURCE =
'void main(){\n' +
'gl_FragColor = vec4(0.05,0.95,0.60,1.0);\n' +
'}\n'
var ANGLE_STEP = 45;
function main() {
var canvas = document.querySelector('#canvas');
console.log(canvas)
var gl = getWebGLContext(canvas);

initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE);

var n = initVertexBuffers(gl);
gl.clearColor(0, 0, 0, 1);
var u_xformMatrix = gl.getUniformLocation(gl.program, 'u_xformMatrix');

var currentAngle = 0.0;
var modelMatrix = new Matrix4();
var tick = () => {
// currentAngle += 0.5;
currentAngle = animate(currentAngle); // Update the rotation angle
draw(gl, n, currentAngle, modelMatrix, u_xformMatrix);
requestAnimationFrame(tick, canvas);
}
tick();
}

const initVertexBuffers = (gl) => {

var Hoimon = [];
var step = 2 * 3.14 / 100.0;
var i;
var angle, r;
//=========hinh non
for (i = 0; i < 100; i += 2) {
r = 0.5;
angle = i * step;
Hoimon.push(0.0); Hoimon.push(0.0); Hoimon.push(1.0);
Hoimon.push(r * Math.cos(angle));
Hoimon.push(r * Math.sin(angle));
Hoimon.push(0.0);
angle = (i + 1) * step;
Hoimon.push(r * Math.cos(angle));
Hoimon.push(r * Math.sin(angle));
Hoimon.push(0.0);
}
Hoimon.push(0.0); Hoimon.push(0.0); Hoimon.push(1.0);
Hoimon.push(r * Math.cos(0)); Hoimon.push(r * Math.sin(0)); Hoimon.push(0.0);

var vertexBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
gl.bufferData(gl.ARRAY_BUFFER, Hoimon, gl.STATIC_DRAW); //
var a_Position = gl.getAttribLocation(gl.program, "a_Position");
gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, 0, 0);
gl.enableVertexAttribArray(a_Position);

// return n;

var Bom = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, Bom);
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(Hoimon), gl.STATIC_DRAW);
gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, 0, 0);
gl.enableVertexAttribArray(a_Position);
}

const draw = (gl, n, currentAngle, modelMatrix, u_xformMatrix) => {
modelMatrix.setRotate(currentAngle, 1, 1, 1);
gl.uniformMatrix4fv(u_xformMatrix, false, modelMatrix.elements);
gl.clear(gl.COLOR_BUFFER_BIT);
for (var i = 0; i < 150; i++)//ve hinh non co vien
gl.drawArrays(gl.LINE_LOOP, i, 3);
}

var g_last = Date.now();
function animate(angle) {
// Calculate the elapsed time
var now = Date.now();
var elapsed = now - g_last;
g_last = now;
// Update the current rotation angle (adjusted by the elapsed time)
var newAngle = angle + (ANGLE_STEP * elapsed) / 1000.0;
return newAngle %= 360;
}


const btnStop = document.querySelector(".btn-warning");
btnStop.addEventListener("click", () => {
var current_angle = ANGLE_STEP;
ANGLE_STEP = 0;
btnStop.addEventListener("click", () => {
ANGLE_STEP = current_angle;
})
})

const btnLeft = document.querySelector(".btn-success");
btnLeft.addEventListener("click", () => {
ANGLE_STEP = 45;
})

const btnRight = document.querySelector(".btn-danger");
btnRight.addEventListener("click", () => {
ANGLE_STEP = -45;
})
canvas.addEventListener("click", () => {
var current_angle = ANGLE_STEP;
ANGLE_STEP = 0;
canvas.addEventListener("click", () => {
ANGLE_STEP = current_angle;
})
})




